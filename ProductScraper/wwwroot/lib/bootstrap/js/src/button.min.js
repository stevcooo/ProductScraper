/**
 * Minified by jsDelivr using Terser v3.14.1.
 * Original file: /npm/bootstrap@4.4.1/js/src/button.js
 * 
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import $ from"jquery";const NAME="button",VERSION="4.4.1",DATA_KEY="bs.button",EVENT_KEY=`.${DATA_KEY}`,DATA_API_KEY=".data-api",JQUERY_NO_CONFLICT=$.fn[NAME],ClassName={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},Selector={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLES:'[data-toggle="buttons"]',DATA_TOGGLE:'[data-toggle="button"]',DATA_TOGGLES_BUTTONS:'[data-toggle="buttons"] .btn',INPUT:'input:not([type="hidden"])',ACTIVE:".active",BUTTON:".btn"},Event={CLICK_DATA_API:`click${EVENT_KEY}.data-api`,FOCUS_BLUR_DATA_API:`focus${EVENT_KEY}.data-api `+`blur${EVENT_KEY}.data-api`,LOAD_DATA_API:`load${EVENT_KEY}.data-api`};class Button{constructor(e){this._element=e}static get VERSION(){return VERSION}toggle(){let e=!0,t=!0;const s=$(this._element).closest(Selector.DATA_TOGGLES)[0];if(s){const a=this._element.querySelector(Selector.INPUT);if(a){if("radio"===a.type)if(a.checked&&this._element.classList.contains(ClassName.ACTIVE))e=!1;else{const e=s.querySelector(Selector.ACTIVE);e&&$(e).removeClass(ClassName.ACTIVE)}else"checkbox"===a.type?"LABEL"===this._element.tagName&&a.checked===this._element.classList.contains(ClassName.ACTIVE)&&(e=!1):e=!1;e&&(a.checked=!this._element.classList.contains(ClassName.ACTIVE),$(a).trigger("change")),a.focus(),t=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(t&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(ClassName.ACTIVE)),e&&$(this._element).toggleClass(ClassName.ACTIVE))}dispose(){$.removeData(this._element,DATA_KEY),this._element=null}static _jQueryInterface(e){return this.each(function(){let t=$(this).data(DATA_KEY);t||(t=new Button(this),$(this).data(DATA_KEY,t)),"toggle"===e&&t[e]()})}}$(document).on(Event.CLICK_DATA_API,Selector.DATA_TOGGLE_CARROT,e=>{let t=e.target;if($(t).hasClass(ClassName.BUTTON)||(t=$(t).closest(Selector.BUTTON)[0]),!t||t.hasAttribute("disabled")||t.classList.contains("disabled"))e.preventDefault();else{const s=t.querySelector(Selector.INPUT);if(s&&(s.hasAttribute("disabled")||s.classList.contains("disabled")))return void e.preventDefault();Button._jQueryInterface.call($(t),"toggle")}}).on(Event.FOCUS_BLUR_DATA_API,Selector.DATA_TOGGLE_CARROT,e=>{const t=$(e.target).closest(Selector.BUTTON)[0];$(t).toggleClass(ClassName.FOCUS,/^focus(in)?$/.test(e.type))}),$(window).on(Event.LOAD_DATA_API,()=>{let e=[].slice.call(document.querySelectorAll(Selector.DATA_TOGGLES_BUTTONS));for(let t=0,s=e.length;t<s;t++){const s=e[t],a=s.querySelector(Selector.INPUT);a.checked||a.hasAttribute("checked")?s.classList.add(ClassName.ACTIVE):s.classList.remove(ClassName.ACTIVE)}for(let t=0,s=(e=[].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE))).length;t<s;t++){const s=e[t];"true"===s.getAttribute("aria-pressed")?s.classList.add(ClassName.ACTIVE):s.classList.remove(ClassName.ACTIVE)}}),$.fn[NAME]=Button._jQueryInterface,$.fn[NAME].Constructor=Button,$.fn[NAME].noConflict=(()=>($.fn[NAME]=JQUERY_NO_CONFLICT,Button._jQueryInterface));export default Button;
//# sourceMappingURL=/sm/7280ee15974736ab54b4ccb4bee39e7ce4ab3117cf1bbcfbf1b9a43d0ff205df.map