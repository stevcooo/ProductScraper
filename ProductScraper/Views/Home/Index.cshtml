@model IEnumerable<ProductScraper.Models.EntityModels.ProductInfo>

@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>In this demo project, I'll try to cover a few areas of the Azure serverless architecture ecosystem and use them on a real application. My idea was to create a web page where I can create a list of products/items that are available on online shops and track their changes, and whenever there is a change on the price or availability an email with the updates will be sent to me. That way I'll save myself some time checking product prices to see when they are on sale or become available. To get details from some URL, we gonna use a scraper to collect data from other websites. Every website/webstore has a different layout and for that, we need to configure our scraper to be able to scrape different stores.</p>
    <p>This is open source project. Codebase and the documentation can be found here: <a href="https://github.com/stevcooo/ProductScraper">https://github.com/stevcooo/ProductScraper</a></p>
</div>

@if (Model.Any())
{
    <p>
        <a asp-controller="Products" asp-action="Create">Add New</a>
    </p>
    <table class="table">
        <thead>
            <tr>
                <th style="width: 35%">
                    Name
                </th>
                <th>
                    Price
                </th>
                <th>
                    Currency
                </th>
                <th>
                    Available
                </th>
                <th>
                    Last checked
                </th>
                <th>
                    Changed
                </th>
                <th style="width: 20%">
                    Actions
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        <a target="_blank" href="@item.URL">@item.Name</a>

                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Currency)
                    </td>
                    <td>
                        @if (item.Availability.HasValue)
                        {
                            if (item.Availability.Value)
                            {
                                <i class="fas fa-check text-success"></i>
                            }
                            else
                            {
                                <i class="fas fa-times text-danger"></i>
                            }
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastCheckedOn)
                    </td>
                    <td>
                        @if (item.HasChangesSinceLastTime)
                        {
                            <i class="fas fa-check text-success"></i>
                        }
                        else
                        {
                            <i class="fas fa-times text-danger"></i>
                        }
                    </td>
                    <td>
                        <a asp-controller="Products" asp-action="Check" asp-route-id="@item.Id">Check</a> |
                        <a asp-controller="Products" asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-controller="Products" asp-action="Details" asp-route-id="@item.Id">Info</a> |
                        <a asp-controller="Products" asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}
